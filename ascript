#!/bin/bash

# created Sun 3rd, March 2024 by https://github.com/wahidbenkhaled

# :dependencies:
# :usage:
usage() {
    printf "%s - Bash CLI Script Generator\n" "$name"
    printf "Usage: %s [COMMAND] [OPTIONS]\n" "$name"
    echo
    if [[ -n $1 ]]; then
        printf "Commands:\n"
        printf "  generate              Generate new script files\n"
        printf "  add [FILE NAMES]      Generate any script file\n"
        printf "  build                 Generate the final script\n"
        printf "  deploy                Installe any %s script\n" "$name"
        printf "  install               Installe %s locally\n" "$name"
        echo
        printf "Options:\n"
        printf "  -m, --minimal         Skip liberaries when Generating new files\n"
        printf "  -t, --template        Soecifiy which template used for Generation\n"
        printf "  -m, --minimal         Skip liberaries when Generating new files\n"
        printf "  -h, --help            Show this help message\n"
        printf "  -v, --version         Display the current version\n"
        echo
    else
        printf "Try \`%s --help\` for more options.\n" "$name"
    fi
}


# :parse:
parse() {
    # parse arguments:
    case $1 in
        generate)
            command[generate]="on"; shift ;;
        add)
            command[add]="on"; shift ;;
        build)
            command[build]="on"; shift ;;
        deploy)
            command[deploy]="on"; shift ;;
        install)
            chmod +x "$0"
            cp -i "$0" "$HOME/.local/bin/"
            exit ;;
        -h|--help)
            usage "long"; exit ;;
        -v|--version)
            echo "$name vesion: $version"; exit ;;
        *)
            usage; exit 1 ;;
    esac

    ARGS=$(getopt -o 'mt:fxvh' -l 'minimal,template:,debug,version,help' -n "$name" -- $@)

    if [ $? -ne 0 ]; then
        usage && exit 1
    fi

    eval set -- "$ARGS"
    unset   ARGS

    while true; do
        case "$1" in
            -h|--help)
                usage "long";
                exit ;;
            -v|--version)
                echo "$name vesion: $version"
                exit ;;
            -x|--debug)
                debug="on"
                shift; continue ;;
            -m|--minimal)
                args[minimal]="on"
                shift; continue ;;
            -t|--template)
                args[template]="$2"
                shift 2; continue ;;
            --)
                shift; break ;;
        esac
    done

    # validate arguments:
    if [[ ${command[add]} != "on" && $# -gt 0 ]]; then
        echo "Error: $name does not accept arguments [$*]" && exit 1
    fi

    [[ -z $error ]] || exit 1 ; files=("$@")
}


# :defaults:
defaults() {
    doGenerate=${command[generate]}
    doAdd=${command[add]}
    doBuild=${command[build]}
    doDeploy=${command[deploy]}

    configDir=${args[config]="$HOME/.config/ascript"}
    template=${args[template]='default'}
    templateUrl=${args[templateUrl]="https://github.com/wahidbenkhaled/ascript_template"}
    minimal=${args[minimal]}
}


# :debugging:
debugging() {
    [[ -n $debug ]] || return 0
    printf "\nParameters:\n"
    printf "  %-16s %s\n" "command" "${!command[@]}"
    printf "\nOther options:\n"
    for key in "${!args[@]}"; do printf "  %-16s %s\n" "$key" "${args[$key]}"; done
    echo

    read -rp "Do you want to continue? [Y/n]: " response
    [[ -n $response && $response != "y" ]] || return 0
    echo "Abort." ; exit 0
}


# :functions:
check_template() {
    # validate template:
    if [[ $template != "default" && ! -d $configDir/$template ]]; then
        read -rp "The template [$template] does not exist, do you want to use the default? [Y/n]: " response
        [[ -z $response || $response == "y" ]] || exit
        template="default"
    fi

    if [[ $template == "default" && ! -d $configDir/default ]]; then
        read -rp "The default template is missing, do you want to download it? [Y/n]: " response
        [[ -z $response || $response == "y" ]] || exit
        git clone "$templateUrl" "$configDir/default"
    fi
}

get_scriptDir() {
    scriptDir="${PWD%/src*}"
    [[ ! -f $scriptDir/.ascript ]] || return 0
    echo "Error: unable to verify the script directory" && exit 1
}

get_scriptName() {
    [[ -f "$scriptDir"/src/script.sh ]] || return 0
    scriptName=$(grep -oP "(?<=name=)['\"]?\K[^'\"]+(?=['\"]?)" "$scriptDir"/src/script.sh)
}

generate() {
    [[ -n $doGenerate ]] || return 0

    currentPath="${PWD%/src*}"
    if [[ -f $currentPath/.ascript ]]; then
        echo "Error: unable to generate files inside another script directories" && exit 1
    fi

    check_template
    [[ -f .ascript ]] || echo "generated by $USER using aScript on $(date)" > ".ascript"
    mkdir -p "./src/"
    cp -n "$configDir/$template/"*.sh "./src/"

    [[ -n $minimal ]] || cp -nr "$configDir/$template/lib/" "./src/"
}

add() {
    [[ -n $doAdd ]] || return 0
    get_scriptDir && check_template

    for file in "${files[@]}"; do
        [[ $file != "function"* ]] || cp -nr "$configDir/$template/lib/" "$scriptDir/src/"
        [[ $file == "function"* ]] || cp -n "$configDir/$template/$file"*.sh "$scriptDir/src/"
    done
}

build() {
    [[ -n $doBuild ]] || return 0
    get_scriptDir && get_scriptName
    cp "$scriptDir/src/script.sh" "$scriptDir/${scriptName:=script}"
    chmod +x "$scriptDir/$scriptName"
    for file in "$scriptDir"/src/*; do
        fileName=${file##*/}
        sed -i "/:${fileName%.*}:/r $file" "$scriptDir/$scriptName"
    done

    for file in "$scriptDir"/src/lib/*; do
        sed -i "/:functions:/r $file" "$scriptDir/$scriptName"
    done
}

deploy() {
    [[ -n $doDeploy ]] || return 0
    get_scriptDir && get_scriptName
    [[ -f $scriptDir/$scriptName ]] || { echo "Error: unable to locate script file"; exit 1;}
    cp -i "$scriptDir/$scriptName" "$HOME/.local/bin/$scriptName"
}


main() {
    generate
    add
    build
    deploy
}

declare -A command=() args=()
name=aScript
version='0.1.0'

parse "$@"
defaults
debugging
main
